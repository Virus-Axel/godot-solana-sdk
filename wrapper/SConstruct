#!/usr/bin/env python

import os

from pathlib import Path

Import('env')

WRAPPER_NAME = 'wrapper'
home_directory = Path.home()
cargo_build_command = str(home_directory) + '/.cargo/bin/cargo build'

def get_platform_arg_and_adjust():
    linker_settings = ""
    TARGET_MAP = {
        'ios': 'aarch64-apple-ios',
        'macos': 'aarch64-apple-darwin',
        'linux': 'x86_64-unknown-linux-gnu',
        'windows': 'x86_64-pc-windows-gnu',
        'android': 'aarch64-linux-android',
        'javascript': 'wasm32-unknown-unknown'
    }

    debug_or_release = "debug"
    if env["target"] == "template_release":
        debug_or_release = "release"

    rust_target = TARGET_MAP[env["platform"]]
    if env["platform"] == "android":
        linker_settings = 'AR=llvm-ar RUSTFLAGS="-C linker=aarch64-linux-android31-clang"'

    elif env["platform"] == "javascript":
        env.Append(LINKFLAGS=['--js-library', 'wrapper/target/wasm32-unknown-unknown/release/module.js'])

    elif env["platform"] == "ios":
        linker_settings = 'LD_LIBRARY_PATH=/root/ioscross/arm64/lib/ SDKROOT=/root/ioscross/arm64/SDK/iPhoneOS16.1.sdk/'
        # Adjust environment in build containers to work with rust wrapper

        env.Append(LIBS = ['objc'])
        env.Append(LIBS = ['c'])
        env.Append(LIBS = ['c++'])
        env.Append(LINKFLAGS=['-framework', 'Security', '-L', '/root/ioscross/arm64/lib/'])

        env['LINK'] = "/root/osxcross/target/bin/aarch64-apple-darwin22-ld"
        env.Append(LD_LIBRARY_PATH=['/root/ioscross/arm64/lib/'])

        #env['LINKFLAGS'].remove(["-isysroot", env["IOS_SDK_PATH"], "-F" + env["IOS_SDK_PATH"]])
        #env.Subst('LINKFLAGS', "-isysroot", "-syslibroot")
        #env['LINKFLAGS'] = [s.subst('-isysroot', '-syslibroot') for s in env['LINKFLAGS']]
        for index in range(len(env['LINKFLAGS'])):
            if env['LINKFLAGS'][index] == "-isysroot":
                env['LINKFLAGS'][index] = "-syslibroot"

        env['SHLINKFLAGS'].remove("-shared")
        env.Append(LINKFLAGS=['-dylib'])

    elif env["platform"] == 'windows':
        env.Append(LIBS = ['ws2_32'])
        env.Append(LIBS = ['bcrypt'])
        env.Append(LIBS = ['userenv'])


    if env["platform"] != 'javascript':
        env.Append(LIBS = [WRAPPER_NAME])

    library_path = "{}/target/{}/{}/".format(WRAPPER_NAME, rust_target, debug_or_release)

    env.Append(LIBPATH = [library_path])

    return {'linker_settings': linker_settings, 'target': rust_target}


def build_rustlib(target, rust_env):
    build_type = ''
    if target == 'template_release':
        build_type = '--release'

    build_settings = get_platform_arg_and_adjust()

    command = '{} {} --manifest-path=wrapper/Cargo.toml --target {} {}'.format(build_settings['linker_settings'], cargo_build_command, build_settings['target'], build_type)
    #env.Execute(command)
    action = rust_env.Action(command)

    if env["platform"] == 'javascript':
        target_dir = 'target/wasm32-unknown-unknown/debug/'
        if target == 'template_release':
            target_dir = 'target/wasm32-unknown-unknown/release/'
        emcc_command = 'emcc -s MODULARIZE=1 {}libwrapper.a -o {}module.js'.format(target_dir, target_dir)
        action += rust_env.Action(emcc_command)
    
    return action

rust_env = Environment(ENV=os.environ)

rust_sources = Glob("wrapper/src/*.rs")
rust_sources += Glob("wrapper/src/*/*.rs")

build_action = build_rustlib(env["target"], rust_env)
wrapper = rust_env.AlwaysBuild(rust_env.Alias("phony", rust_sources, build_action))

Return('wrapper')