name: Run Examples
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - identifier: linux-debug
            name: Linux Debug
            runner: ubuntu-latest
            target: template_debug
            platform: linux
            arch: x86_64
            threads: True

          - identifier: web-debug-nothreads
            name: Web Debug (Single Thread)
            runner: ubuntu-latest
            target: template_debug
            platform: web
            arch: wasm32
            threads: False

          - identifier: web-debug
            name: Web Debug
            runner: ubuntu-latest
            target: template_debug
            platform: web
            arch: wasm32
            threads: True

    steps:
      - name: (Web) Install emsdk toolchain
        if: ${{ startsWith(matrix.identifier, 'web-') }}
        uses: mymindstorm/setup-emsdk@v14
        with:
          # Make sure to set a version number!
          version: 3.1.64

      - name: (Web) Install node
        if: ${{ startsWith(matrix.identifier, 'web-') }}
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: (Web) Update npm
        if: ${{ startsWith(matrix.identifier, 'web-') }}
        run: |
          npm install -g npm@11

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Set up SCons
        shell: bash
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons==4.8
          scons --version

      - name: Checkout project
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get godot-cpp commit SHA
        id: godotcpp
        run: echo "sha=$(git -C godot-cpp rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Cache godot-cpp bindings
        uses: actions/cache@v4
        with:
          path: .godot/
          key: godot-cpp-${{ matrix.identifier }}-${{ steps.godotcpp.outputs.sha }}

      - name: Compile extension
        shell: sh

        run: |
          scons threads='${{ matrix.threads }}' target='${{ matrix.target }}' platform='${{ matrix.platform }}' arch='${{ matrix.arch }}' -j2
          cp godot-solana-sdk.gdextension bin/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.identifier }}
          path: |
            ${{ github.workspace }}/bin/

  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: ${{ github.event.repository.name }}
          pattern: ${{ github.event.repository.name }}-*
          delete-merged: true
          retention-days: 1

  check_example_directories:
    runs-on: ubuntu-latest
    needs: merge
    outputs:
        dir: ${{ steps.set-dirs.outputs.dir }}
    steps:
    - uses: actions/checkout@v2
    - id: set-dirs
      run: echo "::set-output name=dir::$(ls -d example/*/ | jq -R -s -c 'split("\n")[:-1]')"

  run:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/virus-axel/run_container:latest
      credentials:
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}
    needs: [check_example_directories]
    strategy:
      fail-fast: false
      matrix:
        # List matrix strategy from directories dynamically
        dir: ${{fromJson(needs.check_example_directories.outputs.dir)}}
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
        with:
          submodules: recursive
  
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.repository.name }}
          path: ./bin

      # Not possible to create this directory beforehand.
      # Not possible to set export templates path in godot CLI.
      - name: ðŸ¤– Setup Godot
        run: |
          mkdir -p /github/home/.local/share/godot/export_templates/
          ln -s /usr/local/share/godot/export_templates/4.4.1.stable /github/home/.local/share/godot/export_templates/

      - name: Prepare project 
        shell: bash
        run: |
          cp godot-solana-sdk.gdextension bin/
          cd ${{matrix.dir}}
          ln -s ../../bin
          godot --headless --import --path .

      - name: (Web) Setup Puppeteer
        if: ${{ endsWith(matrix.dir, 'Web/') }}
        run: |
          cd .github/workflows/puppeteer
          npm init -y
          npm install puppeteer

      - name: (Web) Export project to web
        if: ${{ endsWith(matrix.dir, 'Web/') }}
        run: |
          cd ${{matrix.dir}}
          mkdir tmp
          godot --headless --path . --export-debug Web tmp/tmp_js_export.html

      - name: (Web) Download wallet mock
        if: ${{ endsWith(matrix.dir, 'Web/') }}
        uses: actions/checkout@v4
        with:
          repository: 'Virus-Axel/solana-wallet-mock'
          path: 'solana-wallet-mock'

      - name: (Web) Test project in browser
        if: ${{ endsWith(matrix.dir, 'Web/') }}
        run: |
          solana-keygen new -s --no-bip39-passphrase
          scons test-validator --disable_prompts
          for attempt in {1..30}; do sleep 1; if curl -sS http://localhost:8899 -X POST -H 'Content-Type: application/json' -d '{"jsonrpc":"2.0","id":1, "method":"getBlockHeight"}'; then echo ready; break; fi; echo waiting...; done
          python3 .github/workflows/puppeteer/serve.py --no-browser --root `pwd`/${{matrix.dir}}tmp &
          cd .github/workflows/puppeteer
          output=$(node puppeteer.js)
          echo "$output"
          echo "$output" | grep -q 'ALL TESTS PASSED'
          exit $?

      - name: Test project
        if: ${{ endsWith(matrix.dir, 'Web/') == false }}
        shell: bash
        run: |
          solana-keygen new -s --no-bip39-passphrase
          scons test-validator --disable_prompts
          for attempt in {1..30}; do sleep 1; if curl -sS http://localhost:8899 -X POST -H 'Content-Type: application/json' -d '{"jsonrpc":"2.0","id":1, "method":"getBlockHeight"}'; then echo ready; break; fi; echo waiting...; done
          cd ${{matrix.dir}}
          godot --headless --path . --quit-after 5000 | ( ! grep FAIL)
          exit $?